import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask


plugins {
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.7.1"
}

group 'com.shoes.ordering.system'
version '1.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    implementation "org.apache.avro:avro:1.11.0"

    def springKafkaVersion = '2.8.2'
    implementation "org.springframework.kafka:spring-kafka:$springKafkaVersion"

    def kafkaAvroSerializerVersion = '7.0.1'
    implementation("io.confluent:kafka-avro-serializer:$kafkaAvroSerializerVersion") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.swagger', module: 'swagger-core'
    }

    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

apply plugin: "java"
apply plugin: "com.github.davidmc24.gradle.plugin.avro-base"

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("src/main/java/avro")
}

tasks.named("compileJava").configure {
    source(generateAvro)
}