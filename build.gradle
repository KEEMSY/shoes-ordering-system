import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.7.1"

    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group 'com.shoes.ordering.system'
version '1.0-SNAPSHOT'
sourceCompatibility = "16"

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    runtimeOnly 'mysql:mysql-connector-java'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation "org.apache.avro:avro:1.11.0"

    def springKafkaVersion = '2.8.2'
    implementation "org.springframework.kafka:spring-kafka:$springKafkaVersion"

    def kafkaAvroSerializerVersion = '7.0.1'
    implementation("io.confluent:kafka-avro-serializer:$kafkaAvroSerializerVersion") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.swagger', module: 'swagger-core'
    }

    implementation("org.xerial.snappy:snappy-java:1.1.8.4")

    // forTest
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"
    testImplementation 'org.testcontainers:testcontainers:1.19.0'
    testImplementation 'org.springframework.kafka:spring-kafka-test'


    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

apply plugin: "java"
apply plugin: "com.github.davidmc24.gradle.plugin.avro-base"

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("src/main/java/avro")
}

tasks.named("compileJava").configure {
    source(generateAvro)
}

// Querydsl 설정

// querydsl 사용할 경로 지정 현재 지정한 부분은 .gitignore에 포함되므로 git 에 올라가지 않음
def querydslDir = "$buildDir/generated/'querydsl'"

// JPA 사용여부 및 사용 경로 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

// build 시 사용할 sourceSet 추가 설정
sourceSets {
    main.java.srcDir querydslDir
}

// querydsl 컴파일 시 사용할 옵션 설정
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

// querydsl 이 compileClassPath 를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

configurations.all {
    resolutionStrategy.eachDependency {
        if (requested.group == "org.xerial.snappy" && requested.name == "snappy-java" && requested.version == "1.1.7.7") {
            useVersion("1.1.8.4")
            because("support M1")
        }
    }
}
targetCompatibility = JavaVersion.VERSION_16
