spring:
  profiles:
    group:
      "local": "local,common"
      "container": "container,common"

---
# Common Profile Configurations
spring:
  config:
    activate:
      on-profile: "common"

server:
  port: 9191

logging:
  level:
    com.com.shoes.ordering.system: DEBUG

member-service:
  create-member-request-topic-name: create-member-request
  update-member-request-topic-name: update-member-request

product-service:
  create-product-request-topic-name: create-product-request
  update-product-request-topic-name: update-product-request

order-service:
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

  payment-consumer-group-id: payment-topic-consumer

---
# Local Profile Configurations
spring:
  profiles:
    active: local
    on-profile: "local"

  datasource:
    url: jdbc:mysql://localhost:13306/shoes_ordering_system?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: root
    password: test
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect

    open-in-view: true
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false
      show-sql: true
      properties:
        hibernate.format_sql: true
        dialect: org.hibernate.dialect.MySQL8InnoDBDialect

  redis:
    host: localhost
    port: 16379

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

---
# Container Profile Configurations
spring:
  config:
    activate:
      on-profile: "container"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect

    open-in-view: true
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false
      show-sql: true
      properties:
        hibernate.format_sql: true
        dialect: org.hibernate.dialect.MySQL8InnoDBDialect

  redis:
    host: spring-redis-container
    port: 6379

kafka-config:
  bootstrap-servers: kafka-broker-1:19092, kafka-broker-2:29092, kafka-broker-3:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://schema-registry:8081
  num-of-partitions: 3
  replication-factor: 3

---